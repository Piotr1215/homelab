---
# ConfigMap with patch script
apiVersion: v1
kind: ConfigMap
metadata:
  name: resource-limiter-script
  namespace: kagent
data:
  limit-resources.sh: |
    #!/bin/bash
    echo "Starting resource limiter for kagent agents..."
    
    # List of deployments to patch
    DEPLOYMENTS="k8s-agent k8s-helper helm-agent observability-agent promql-agent"
    
    while true; do
      for deploy in $DEPLOYMENTS; do
        # Check if deployment exists
        if kubectl get deployment $deploy -n kagent &>/dev/null; then
          # Get current CPU limit
          current_limit=$(kubectl get deployment $deploy -n kagent -o jsonpath='{.spec.template.spec.containers[0].resources.limits.cpu}' 2>/dev/null)
          
          # If limit is not 200m, patch it
          if [ "$current_limit" != "200m" ]; then
            echo "Patching $deploy (current limit: $current_limit)"
            kubectl patch deployment $deploy -n kagent --type='json' \
              -p='[{"op": "replace", "path": "/spec/template/spec/containers/0/resources/limits/cpu", "value": "200m"},
                   {"op": "replace", "path": "/spec/template/spec/containers/0/resources/limits/memory", "value": "512Mi"},
                   {"op": "replace", "path": "/spec/template/spec/containers/0/resources/requests/cpu", "value": "50m"},
                   {"op": "replace", "path": "/spec/template/spec/containers/0/resources/requests/memory", "value": "256Mi"}]' \
              2>/dev/null && echo "Successfully patched $deploy"
          fi
        fi
      done
      
      # Check every 30 seconds
      sleep 30
    done
---
# ServiceAccount for the job
apiVersion: v1
kind: ServiceAccount
metadata:
  name: resource-limiter
  namespace: kagent
---
# Role with permissions to patch deployments
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: resource-limiter
  namespace: kagent
rules:
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "patch"]
---
# RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: resource-limiter
  namespace: kagent
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: resource-limiter
subjects:
- kind: ServiceAccount
  name: resource-limiter
  namespace: kagent
---
# Deployment that runs the limiter script
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kagent-resource-limiter
  namespace: kagent
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kagent-resource-limiter
  template:
    metadata:
      labels:
        app: kagent-resource-limiter
    spec:
      serviceAccountName: resource-limiter
      containers:
      - name: limiter
        image: bitnami/kubectl:latest
        command: ["/bin/bash"]
        args: ["/scripts/limit-resources.sh"]
        volumeMounts:
        - name: script
          mountPath: /scripts
        resources:
          requests:
            cpu: 10m
            memory: 32Mi
          limits:
            cpu: 50m
            memory: 64Mi
      volumes:
      - name: script
        configMap:
          name: resource-limiter-script
          defaultMode: 0755