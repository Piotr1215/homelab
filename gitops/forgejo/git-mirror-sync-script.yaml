---
apiVersion: v1
kind: ConfigMap
metadata:
  name: git-mirror-sync-script
  namespace: git-mirror
  labels:
    app: git-mirror-sync
data:
  mirror-sync.sh: |
    #!/bin/bash
    set -eo pipefail

    # Environment variables (injected by CronJob):
    # - SOURCE_URL: GitHub repository URL
    # - MIRROR_NAME: Name for the mirror repository
    # - FORGEJO_URL: Forgejo API URL (http://forgejo-http:3000)
    # - FORGEJO_USER: Forgejo admin username
    # - FORGEJO_PASSWORD: Forgejo admin password

    MIRROR_DIR="/mirrors/${MIRROR_NAME}.git"
    LOCK_FILE="/tmp/mirror-${MIRROR_NAME}.lock"
    TIMEOUT=300  # 5 minutes per CONTRACT

    log() {
      echo "[$(date +'%Y-%m-%d %H:%M:%S')] $*"
    }

    error() {
      echo "[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $*" >&2
    }

    # Check required environment variables
    check_env() {
      local missing=0
      if [ -z "$SOURCE_URL" ]; then
        error "Missing required environment variable: SOURCE_URL"
        missing=1
      fi
      if [ -z "$MIRROR_NAME" ]; then
        error "Missing required environment variable: MIRROR_NAME"
        missing=1
      fi
      if [ -z "$FORGEJO_URL" ]; then
        error "Missing required environment variable: FORGEJO_URL"
        missing=1
      fi
      if [ -z "$FORGEJO_USER" ]; then
        error "Missing required environment variable: FORGEJO_USER"
        missing=1
      fi
      if [ -z "$FORGEJO_PASSWORD" ]; then
        error "Missing required environment variable: FORGEJO_PASSWORD"
        missing=1
      fi
      if [ $missing -eq 1 ]; then
        return 1
      fi
      return 0
    }

    # Acquire lock to prevent concurrent syncs
    acquire_lock() {
      log "Acquiring lock: ${LOCK_FILE}"
      # Simple lock file approach (CronJob concurrencyPolicy: Forbid handles most cases)
      if [ -f "${LOCK_FILE}" ]; then
        error "Lock file exists: ${LOCK_FILE}"
        error "Another sync might be in progress for ${MIRROR_NAME}"
        return 1
      fi
      touch "${LOCK_FILE}"
      log "Lock acquired"
      return 0
    }

    # Release lock
    release_lock() {
      rm -f "${LOCK_FILE}"
      log "Lock released"
    }

    # Check if repository exists in Forgejo
    check_repo_exists() {
      api_url="${FORGEJO_URL}/api/v1/repos/${FORGEJO_USER}/${MIRROR_NAME}"
      log "Checking if repository exists: ${api_url}"

      http_code=$(curl -s -o /dev/null -w "%{http_code}" \
        -u "${FORGEJO_USER}:${FORGEJO_PASSWORD}" \
        "${api_url}")

      if [ "${http_code}" = "200" ]; then
        log "Repository exists in Forgejo"
        return 0
      elif [ "${http_code}" = "404" ]; then
        log "Repository does not exist in Forgejo"
        return 1
      else
        error "Unexpected HTTP status: ${http_code}"
        return 2  # Return error code instead of exiting
      fi
    }

    # Compare commits between GitHub and Forgejo to skip if already synced
    is_already_synced() {
      log "Checking if repository is already synced..."

      # Get default branch from Forgejo
      api_url="${FORGEJO_URL}/api/v1/repos/${FORGEJO_USER}/${MIRROR_NAME}"
      forgejo_response=$(curl -s -u "${FORGEJO_USER}:${FORGEJO_PASSWORD}" "${api_url}")
      default_branch=$(echo "$forgejo_response" | grep -o '"default_branch":"[^"]*"' | cut -d'"' -f4)

      if [ -z "$default_branch" ]; then
        log "Could not determine default branch, will sync to be safe"
        return 1
      fi

      log "Default branch: ${default_branch}"

      # Get latest commit from Forgejo
      forgejo_commit_url="${FORGEJO_URL}/api/v1/repos/${FORGEJO_USER}/${MIRROR_NAME}/branches/${default_branch}"
      forgejo_commit=$(curl -s -u "${FORGEJO_USER}:${FORGEJO_PASSWORD}" "${forgejo_commit_url}" | grep -o '"sha":"[^"]*"' | head -1 | cut -d'"' -f4)

      if [ -z "$forgejo_commit" ]; then
        log "Could not get Forgejo commit SHA, will sync to be safe"
        return 1
      fi

      log "Forgejo latest commit: ${forgejo_commit}"

      # Get latest commit from GitHub using git ls-remote (lightweight, no clone needed)
      github_commit=$(git ls-remote "${SOURCE_URL}" "refs/heads/${default_branch}" 2>/dev/null | awk '{print $1}')

      if [ -z "$github_commit" ]; then
        log "Could not get GitHub commit SHA, will sync to be safe"
        return 1
      fi

      log "GitHub latest commit: ${github_commit}"

      # Compare commits
      if [ "$forgejo_commit" = "$github_commit" ]; then
        log "âœ“ Repository already synced, commits match - SKIPPING"
        return 0
      else
        log "Commits differ, sync needed"
        return 1
      fi
    }

    # Create repository in Forgejo
    create_repo() {
      api_url="${FORGEJO_URL}/api/v1/user/repos"
      log "Creating repository in Forgejo: ${MIRROR_NAME}"

      # Use clean URL (without token) for description
      description_url="${SOURCE_URL_CLEAN:-${SOURCE_URL}}"

      response=$(curl -s -w "\n%{http_code}" \
        -u "${FORGEJO_USER}:${FORGEJO_PASSWORD}" \
        -H "Content-Type: application/json" \
        -d "{
          \"name\": \"${MIRROR_NAME}\",
          \"description\": \"Mirror of ${description_url}\",
          \"private\": false,
          \"auto_init\": false
        }" \
        "${api_url}")

      http_code=$(echo "$response" | tail -n1)
      body=$(echo "$response" | sed '$d')

      if [ "${http_code}" = "201" ]; then
        log "Repository created successfully"
        return 0
      else
        error "Failed to create repository (HTTP ${http_code}): ${body}"
        return 1
      fi
    }

    # Initial mirror clone
    initial_mirror() {
      log "Performing initial mirror clone from ${SOURCE_URL}"
      log "Target: ${MIRROR_DIR}"

      # Create parent directory
      mkdir -p "$(dirname "${MIRROR_DIR}")"

      # Clone with timeout (per CONTRACT)
      if timeout "${TIMEOUT}" git clone --mirror "${SOURCE_URL}" "${MIRROR_DIR}"; then
        log "Initial mirror clone successful"

        # Update remote URL to point to Forgejo
        forgejo_push_url="${FORGEJO_URL}/${FORGEJO_USER}/${MIRROR_NAME}.git"
        cd "${MIRROR_DIR}"
        git remote set-url --push origin "${forgejo_push_url}"

        # Push to Forgejo
        log "Pushing mirror to Forgejo: ${forgejo_push_url}"
        if git push --mirror "http://${FORGEJO_USER}:${FORGEJO_PASSWORD}@forgejo-http:3000/${FORGEJO_USER}/${MIRROR_NAME}.git"; then
          log "Mirror pushed to Forgejo successfully"
        else
          error "Failed to push mirror to Forgejo"
          return 1
        fi
      else
        error "Initial mirror clone failed or timed out"
        return 1
      fi
    }

    # Incremental sync
    incremental_sync() {
      log "Performing incremental sync for ${MIRROR_NAME}"

      cd "${MIRROR_DIR}" || {
        error "Mirror directory does not exist: ${MIRROR_DIR}"
        return 1
      }

      # Fetch updates from GitHub with timeout (per CONTRACT)
      if timeout "${TIMEOUT}" git remote update; then
        log "Incremental sync from GitHub successful"

        # Push updates to Forgejo
        forgejo_push_url="http://${FORGEJO_USER}:${FORGEJO_PASSWORD}@forgejo-http:3000/${FORGEJO_USER}/${MIRROR_NAME}.git"
        log "Pushing updates to Forgejo"
        if git push --mirror "${forgejo_push_url}"; then
          log "Updates pushed to Forgejo successfully"
        else
          error "Failed to push updates to Forgejo"
          return 1
        fi
      else
        error "Incremental sync failed or timed out"
        return 1
      fi
    }

    # Main sync logic
    main() {
      log "=== Git Mirror Sync Started ==="
      log "Source: ${SOURCE_URL}"
      log "Mirror: ${MIRROR_NAME}"

      check_env || return 1
      acquire_lock || return 1

      # Set trap to release lock on exit
      trap release_lock EXIT

      # Check if repository exists in Forgejo
      repo_check_result=0
      check_repo_exists || repo_check_result=$?

      if [ $repo_check_result -eq 2 ]; then
        error "Failed to check repository existence (API error)"
        return 1
      elif [ $repo_check_result -eq 1 ]; then
        log "First-time setup required"
        create_repo || return 1
        initial_mirror || return 1
      else
        log "Repository exists, checking if sync needed..."

        # Check if already synced (compare commits)
        if is_already_synced; then
          log "Repository already up-to-date, skipping sync"
          return 0
        fi

        # Sync needed
        log "Repository exists, performing incremental sync"

        # Check if local mirror exists
        if [ ! -d "${MIRROR_DIR}" ]; then
          log "Local mirror missing, performing initial clone"
          initial_mirror || return 1
        else
          incremental_sync || return 1
        fi
      fi

      log "=== Git Mirror Sync Completed Successfully ==="
    }

    main
  discover-and-sync.sh: |
    #!/bin/bash
    set -eo pipefail

    # Environment variables (injected by CronJob):
    # - GITHUB_USER: GitHub username
    # - GITHUB_TOKEN: GitHub PAT for API access
    # - FORGEJO_URL: Forgejo API URL
    # - FORGEJO_USER: Forgejo admin username
    # - FORGEJO_PASSWORD: Forgejo admin password

    readonly REPO_LIMIT=1000  # Mirror all repos (set high enough for all repos)
    readonly MIRROR_SCRIPT="/scripts/mirror-sync.sh"

    log() {
      echo "[$(date +'%Y-%m-%d %H:%M:%S')] $*"
    }

    error() {
      echo "[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $*" >&2
    }

    # Install jq if not available (using Bitnami's install_packages command)
    ensure_jq() {
      if ! command -v jq &> /dev/null; then
        log "Installing jq for JSON parsing..."
        install_packages jq > /dev/null 2>&1
        log "jq installed successfully"
      fi
    }

    # Check required environment variables
    check_env() {
      missing=0
      if [ -z "$GITHUB_USER" ]; then
        error "Missing required environment variable: GITHUB_USER"
        missing=1
      fi
      if [ -z "$GITHUB_TOKEN" ]; then
        error "Missing required environment variable: GITHUB_TOKEN"
        missing=1
      fi
      if [ -z "$FORGEJO_URL" ]; then
        error "Missing required environment variable: FORGEJO_URL"
        missing=1
      fi
      if [ -z "$FORGEJO_USER" ]; then
        error "Missing required environment variable: FORGEJO_USER"
        missing=1
      fi
      if [ -z "$FORGEJO_PASSWORD" ]; then
        error "Missing required environment variable: FORGEJO_PASSWORD"
        missing=1
      fi
      if [ $missing -eq 1 ]; then
        exit 1
      fi
    }

    # Check GitHub API rate limit
    check_rate_limit() {
      log "Checking GitHub API rate limit..."

      rate_limit_response=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" \
        "https://api.github.com/rate_limit")

      # Parse JSON using jq
      remaining=$(echo "$rate_limit_response" | jq -r '.rate.remaining')
      limit=$(echo "$rate_limit_response" | jq -r '.rate.limit')

      log "GitHub API Rate Limit: ${remaining}/${limit} requests remaining"

      if [ "$remaining" -lt 10 ]; then
        error "GitHub API rate limit too low: ${remaining} requests remaining"
        exit 1
      fi
    }

    # Discover repositories from GitHub with pagination
    discover_repos() {
      log "Discovering repositories for user: ${GITHUB_USER}"
      log "Fetching all repos (with pagination support)"

      # Fetch all repos using pagination (GitHub API max per_page=100)
      # NOTE: Uses multiple API calls if user has >100 repos
      all_repos=""
      page=1

      while true; do
        log "Fetching page ${page}..."
        response=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" \
          "https://api.github.com/users/${GITHUB_USER}/repos?per_page=100&page=${page}&sort=updated&direction=desc")

        # Parse repos from this page
        page_repos=$(echo "$response" | jq -r '.[] | "\(.clone_url) \(.name)"')

        # Break if no more repos
        if [ -z "$page_repos" ]; then
          log "No more repositories on page ${page}"
          break
        fi

        # Append to all_repos
        if [ -z "$all_repos" ]; then
          all_repos="$page_repos"
        else
          all_repos="${all_repos}"$'\n'"${page_repos}"
        fi

        # Count repos on this page
        page_count=$(echo "$page_repos" | wc -l)
        log "Found ${page_count} repositories on page ${page}"

        # Break if we got less than 100 (last page)
        if [ "$page_count" -lt 100 ]; then
          log "Last page reached"
          break
        fi

        page=$((page + 1))
      done

      if [ -z "$all_repos" ]; then
        error "No repositories found for user: ${GITHUB_USER}"
        exit 1
      fi

      # Apply limit if needed (default 100, but we're fetching all now)
      repos=$(echo "$all_repos" | head -n "$REPO_LIMIT")

      total_count=$(echo "$all_repos" | wc -l)
      repo_count=$(echo "$repos" | wc -l)
      log "Total repositories discovered: ${total_count}"
      log "Repositories to mirror: ${repo_count}"
      echo "$repos"
    }

    # Main discovery and sync logic
    main() {
      log "=== Git Mirror Auto-Discovery Started ==="
      log "GitHub User: ${GITHUB_USER}"
      log "Repository Limit: ${REPO_LIMIT}"

      check_env
      ensure_jq
      check_rate_limit

      # Discover repositories
      repos=$(discover_repos)

      # Track success/failure
      total=0
      success=0
      failed=0

      # Mirror each repository
      while IFS= read -r repo_line; do
        if [ -z "$repo_line" ]; then
          continue
        fi

        # Parse clone_url and repo name
        clone_url=$(echo "$repo_line" | awk '{print $1}')
        repo_name=$(echo "$repo_line" | awk '{print $2}')

        # Inject GitHub token into clone URL for authentication (works for public + private repos)
        # SECURITY: Keep authenticated URL internal, never log it!
        authenticated_url=$(echo "$clone_url" | sed "s|https://|https://${GITHUB_TOKEN}@|")

        total=$((total + 1))
        log "================================================"
        log "Mirroring repository ${total}/${REPO_LIMIT}: ${repo_name}"
        log "Source: ${clone_url}"  # Log clean URL without token
        log "================================================"

        # Export variables for mirror-sync.sh
        export SOURCE_URL="$authenticated_url"
        export SOURCE_URL_CLEAN="$clone_url"  # For Forgejo description
        export MIRROR_NAME="$repo_name"
        export FORGEJO_URL
        export FORGEJO_USER
        export FORGEJO_PASSWORD

        # Call the sync script
        if bash "$MIRROR_SCRIPT"; then
          success=$((success + 1))
          log "âœ“ Successfully mirrored: ${repo_name}"
        else
          failed=$((failed + 1))
          error "âœ— Failed to mirror: ${repo_name}"
        fi

      done <<< "$repos"

      log "================================================"
      log "=== Git Mirror Auto-Discovery Completed ==="
      log "Total repositories processed: ${total}"
      log "Successful: ${success}"
      log "Failed: ${failed}"
      log "================================================"

      if [ $failed -gt 0 ]; then
        error "Some repositories failed to mirror"
        exit 1
      fi
    }

    main
