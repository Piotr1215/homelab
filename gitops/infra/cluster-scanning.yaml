---
apiVersion: v1
kind: Namespace
metadata:
  name: cluster-scanning
---
# PVC for Popeye scan reports
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: popeye-reports
  namespace: cluster-scanning
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: local-path
---
# PVC for Kubescape scan reports
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kubescape-reports
  namespace: cluster-scanning
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: local-path
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: popeye-scan
  namespace: cluster-scanning
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: popeye-scanner
          restartPolicy: OnFailure
          containers:
          - name: popeye
            image: derailed/popeye:latest
            command: ["/bin/sh", "-c"]
            args: 
            - |
              TIMESTAMP=$(date +%Y%m%d-%H%M%S)
              REPORT_FILE="popeye-${TIMESTAMP}.html"
              echo "Running Popeye scan at $TIMESTAMP"
              popeye -A --save --out html --output-file /tmp/report.html
              # Popeye creates file at /tmp/popeye/-tmp-report.html
              cp /tmp/popeye/*report.html /reports/$REPORT_FILE || echo "Failed to copy report"
              echo "Report saved to: /reports/$REPORT_FILE"
              ls -la /reports/
              # Keep only last 7 reports
              cd /reports && ls -t *.html 2>/dev/null | tail -n +8 | xargs rm -f 2>/dev/null || true
            volumeMounts:
            - name: reports
              mountPath: /reports
          volumes:
          - name: reports
            persistentVolumeClaim:
              claimName: popeye-reports
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: kubescape-scan
  namespace: cluster-scanning
spec:
  schedule: "0 3 * * *"  # Daily at 3 AM
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: kubescape-scanner
          restartPolicy: OnFailure
          containers:
          - name: kubescape
            image: alpine:latest
            command: ["/bin/sh", "-c"]
            args:
            - |
              # Install kubescape
              apk add --no-cache curl bash jq gzip
              curl -s https://raw.githubusercontent.com/kubescape/kubescape/master/install.sh | /bin/bash
              export PATH=$PATH:/root/.kubescape/bin
              
              TIMESTAMP=$(date +%Y%m%d-%H%M%S)
              REPORT_FILE="kubescape-${TIMESTAMP}.json"
              REPORT_HTML="kubescape-${TIMESTAMP}.html"
              echo "Running Kubescape scan at $TIMESTAMP"
              
              # Run scan and save compact summary
              echo "<!DOCTYPE html><html><head><title>Kubescape Report - $TIMESTAMP</title></head><body><pre>" > "/reports/$REPORT_HTML"
              kubescape scan framework nsa \
                --exclude-namespaces kube-system,kube-public,kube-node-lease \
                --format pretty-printer >> "/reports/$REPORT_HTML" 2>&1
              echo "</pre></body></html>" >> "/reports/$REPORT_HTML"
              
              # Also save detailed JSON (compressed)
              kubescape scan framework nsa \
                --exclude-namespaces kube-system,kube-public,kube-node-lease \
                --format json \
                --output "/reports/$REPORT_FILE"
              gzip "/reports/$REPORT_FILE"
              
              echo "Reports saved to /reports/"
              ls -la /reports/
              
              # Keep only last 7 reports of each type
              cd /reports && ls -t kubescape-*.* 2>/dev/null | tail -n +15 | xargs rm -f 2>/dev/null || true
            volumeMounts:
            - name: reports
              mountPath: /reports
          volumes:
          - name: reports
            persistentVolumeClaim:
              claimName: kubescape-reports
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: popeye-scanner
  namespace: cluster-scanning
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubescape-scanner
  namespace: cluster-scanning
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: popeye-scanner
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kubescape-scanner
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["nodes/proxy"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: popeye-scanner
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: popeye-scanner
subjects:
- kind: ServiceAccount
  name: popeye-scanner
  namespace: cluster-scanning
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubescape-scanner
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubescape-scanner
subjects:
- kind: ServiceAccount
  name: kubescape-scanner
  namespace: cluster-scanning