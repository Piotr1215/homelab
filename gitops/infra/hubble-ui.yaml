---
# Source: cilium/templates/cilium-secrets-namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: "cilium-secrets"
  labels:
    app.kubernetes.io/part-of: cilium
  annotations:
---
# Source: cilium/templates/cilium-envoy/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-envoy"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
automountServiceAccountToken: false
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUl1Q3BRMzdMVjJTZXhtNkNHancxS2d3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkxTVRBeU5qQTVORGswTVZvWERUSTRNVEF5TlRBNQpORGswTVZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUEvaG5oUGdzaE1lWmVaWEhwT2tZd3JOem91b2VZSGdncDVuUEtOTGdrZnVTTUtxbjkKekV6N0dMQUkxSFhDWkM0SU5udEJFQmNMb3ZEN1lSaFI3a25tbTVERGgrSFlFQ3FYRWg0cmNCQlVDUXNiYndSQgpUeWdsMWo4OUNISFEwQ09hSG1waHpreTU2TnAweEo4azAxSXU4MTRwQ3JFNEVUV2JjWC9BbnY1MHRKTnRFY2JmClVqbXM4WXdSRExQemg1Q3RVM3BUd3ZNQll4VFpKYmdkSENmZzdxT2lqN25kSkw3ZEtMN05iOHUxY2l3OThaYkYKRDNXY3BRbUNhUmlTUVphVEM4azhvVk9BU2JmREVGZk9Qa1duZEVWY28xU3hOVlFVU1BaWkRQUzJuNlJYclVtWQptV0p2cXlsQXo5LzFuSkZNZWJBNmtmcjdqODN6ck5YcjFPT0dTUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGR0hZRFBiaEF2Q0tIVTA2emF0NDVocGdmNHhRTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQy80cXUwOXZQU0NQUXBFbnkxVksxVEVnTU1iWVVBVVZVVm8zbjU0YXo4bVd5SGRnWVludkpiCmtPOEQrMWhFNG9ncnNDYWROMEhFbFMxc1FLTXdUbFNpMjZzbExvbXVSZ3hDeXpwRkkvUWsrd2NpcjB2NVowYkQKakNpVGlrM2ZOVVRPVmt3MkdicEhhS3o5cU9aS1daa3BTUmkxWHA3WjJsUDROdWNKTFBMbGdqWWFUaGMzTVJSbwp6QjdzSEQxQ3ZWcXl3cnpKN2h6VXZwVXE5WGVJY0xsRkN2REpmVzZsUDRQWWJLTW11ZC8xWVJMc3ZoaDVWMlBHCmFlWGRXYURtTFFjOHR1ZGkxZkltdFFEanpqOTcwUTMrT1BOaVBrZFJ3d05GajFMbnlIcVA3Ly9sek1EWE5HSVAKcXhkbWpqTHNlS0duOXY5d3J1OTNiM0c0TkhtdEkyc0gKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBL2huaFBnc2hNZVplWlhIcE9rWXdyTnpvdW9lWUhnZ3A1blBLTkxna2Z1U01LcW45CnpFejdHTEFJMUhYQ1pDNElObnRCRUJjTG92RDdZUmhSN2tubW01RERoK0hZRUNxWEVoNHJjQkJVQ1FzYmJ3UkIKVHlnbDFqODlDSEhRMENPYUhtcGh6a3k1Nk5wMHhKOGswMUl1ODE0cENyRTRFVFdiY1gvQW52NTB0Sk50RWNiZgpVam1zOFl3UkRMUHpoNUN0VTNwVHd2TUJZeFRaSmJnZEhDZmc3cU9pajduZEpMN2RLTDdOYjh1MWNpdzk4WmJGCkQzV2NwUW1DYVJpU1FaYVRDOGs4b1ZPQVNiZkRFRmZPUGtXbmRFVmNvMVN4TlZRVVNQWlpEUFMybjZSWHJVbVkKbVdKdnF5bEF6OS8xbkpGTWViQTZrZnI3ajgzenJOWHIxT09HU1FJREFRQUJBb0lCQUNPM2g0MnRDdEYwekRmKwpOd1pWNzJtYzg2bWtmYUZiREdpMFJldjdKa1lmNGdQdE9SdUtocEVGelhmdnhZOUhXU2d2VXducjgxckgvTTI5CkdXY2hSQ1VCeURwRmFKVjlKeGNJM3BvMThWb0VFYXNkTWdEcVo4Y2h4SFozYVI2WW9vVTc5dHVFdFcwaHArQXIKYm9XMXU1dkIxSXNJTmhWVkw3QllnTDdZalpjRUNsRW1oVkV2QTN6Q1ZiZWZjMFJ4T3lsOTN0cnFCdlVHNWhCRApkT2dQMmp1eXJMRk5Ob1Yya1FDZkpkWDJWaHJFREJFMklPanl0ekpHVXRrMjhSbTRPeDZsamxKQ2tiRXVJem5iCmo3SllZdEhEak1PQmhQYkJvKzlheEZNbCtJMmdzVkYxT2V0SlRvZ0tLZll3NkxCSm9kc0FOdFZ5aXRxbk82eGcKNXJqYkpmRUNnWUVBLzdmWGhIb08xOFJRdkI2UGFwMXV0VEhOT3V4OG5KdlBPVTR0Q0s1SVNZWDRrWkUvSnVZQwoyUzFsVENpNmhNZ0pyM0FqYkhLZCs0eUdjV293UUZhSklRbklLOVNiK2lpUjdNQW1sNmZud3ZoWXZVclZjSE0vCnpHcjFiZmNHNXZQOGx1N0w5UyttTzUvU0Z0WHZQQy83VVVPd1RWUldNMytya0ZmM25CY2dxL01DZ1lFQS9tR1UKNmVvcWV3aGpLMDFmczlNNFVzTU5CSlcrUXdNaW9td0NpeWtuNUhSdEIxTG9VZWVxbXk1ZUd2cnJENElyUW5BTQpkdndkeEU1RlYzdk5CWWlIUUs4cjhqeG9STVpWMk1KR2d6djk3ZnZwL3R1YUI0RGVFa0xBQXBrazlGMUEyVUFrCm5mTzBtQXpnbk10STU2SVpwVVJrbGd1eDQ5SFR1OU05bVowSFA5TUNnWUFYeFRNWGNYRW54V3ZyMEx0c0lhNUUKMFpoT1BlVm5lV1JONDJKMFNCOFlGb2dBb0F2S3hkN0Y2VjVkTWZ3RWs4T3l0eTNUeXVPOG1sZDArM1g0eFJLQwpLN0tid0d1dldVNFhQOVZXaTVrVG1wcEZIa3V3NUVXdDd0TlpvWGpXeHg5WHVHTGxLOFM4RGlNdFZEMmt6cUVCCjhOVFdtMXhYOVNveGhMdlRtcUxDMlFLQmdFSk51UHpIVms4L1BtbjQvdXJtTVJZUlZRRk83b3FVOUtBVk93eCsKcTdFMlQzekxOVmF6NVpvUkdlSTZhSzVnSlZwcHpqWHRQT3ovNGI4TnU4Q25kMmw2dngraWN5TUo5ekpLWVFxdgp4bDRUZlVnNmdRbFhvNHBxNzVVOXlZNFFDR2tYK1BOYXBFWEZoWDRZMW1YWnNJbU5MQktYOWNRRjJ3Um42UFJ6Ckk0S1ZBb0dBY0NvQk9VZVE4ZHdXYlFrbExORStkeUZlaE5YcUpUckMrcmp4S2EwaXJJY0FTQjdwaEdTUzBNbEYKZy9McGJJYnQrSHJ3Szh5RzJFZUx0NEk4Q0Y0VEgzUFRkS0JGZWZSNHk5SXkxSmpCVElmQU44Zm1zNitYeXk1bQpzZHZ1Q2RacWRYaFJyVWJ3MEdaQTJYSWhJbWM1RmIvWmNiQzd6TW5TN0hoZDdJdnZ6bG89Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble/tls-helm/relay-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUl1Q3BRMzdMVjJTZXhtNkNHancxS2d3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkxTVRBeU5qQTVORGswTVZvWERUSTRNVEF5TlRBNQpORGswTVZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUEvaG5oUGdzaE1lWmVaWEhwT2tZd3JOem91b2VZSGdncDVuUEtOTGdrZnVTTUtxbjkKekV6N0dMQUkxSFhDWkM0SU5udEJFQmNMb3ZEN1lSaFI3a25tbTVERGgrSFlFQ3FYRWg0cmNCQlVDUXNiYndSQgpUeWdsMWo4OUNISFEwQ09hSG1waHpreTU2TnAweEo4azAxSXU4MTRwQ3JFNEVUV2JjWC9BbnY1MHRKTnRFY2JmClVqbXM4WXdSRExQemg1Q3RVM3BUd3ZNQll4VFpKYmdkSENmZzdxT2lqN25kSkw3ZEtMN05iOHUxY2l3OThaYkYKRDNXY3BRbUNhUmlTUVphVEM4azhvVk9BU2JmREVGZk9Qa1duZEVWY28xU3hOVlFVU1BaWkRQUzJuNlJYclVtWQptV0p2cXlsQXo5LzFuSkZNZWJBNmtmcjdqODN6ck5YcjFPT0dTUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGR0hZRFBiaEF2Q0tIVTA2emF0NDVocGdmNHhRTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQy80cXUwOXZQU0NQUXBFbnkxVksxVEVnTU1iWVVBVVZVVm8zbjU0YXo4bVd5SGRnWVludkpiCmtPOEQrMWhFNG9ncnNDYWROMEhFbFMxc1FLTXdUbFNpMjZzbExvbXVSZ3hDeXpwRkkvUWsrd2NpcjB2NVowYkQKakNpVGlrM2ZOVVRPVmt3MkdicEhhS3o5cU9aS1daa3BTUmkxWHA3WjJsUDROdWNKTFBMbGdqWWFUaGMzTVJSbwp6QjdzSEQxQ3ZWcXl3cnpKN2h6VXZwVXE5WGVJY0xsRkN2REpmVzZsUDRQWWJLTW11ZC8xWVJMc3ZoaDVWMlBHCmFlWGRXYURtTFFjOHR1ZGkxZkltdFFEanpqOTcwUTMrT1BOaVBrZFJ3d05GajFMbnlIcVA3Ly9sek1EWE5HSVAKcXhkbWpqTHNlS0duOXY5d3J1OTNiM0c0TkhtdEkyc0gKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTVENDQWpHZ0F3SUJBZ0lSQVBSc1F4d0M5Ymp5ejU4a3AyQ2ZQNVF3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkxTVRBeU5qQTVORGswTVZvWERUSTJNVEF5TmpBNQpORGswTVZvd0l6RWhNQjhHQTFVRUF3d1lLaTVvZFdKaWJHVXRjbVZzWVhrdVkybHNhWFZ0TG1sdk1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXB2S0hRNk9LNWlya1hFaUdvWHd0U1liSmJaQUMKdTNRY0orMjdVWjQxQml4NjR2NG9TdkNUZU9qdUNlVk9Yak5kMjh5dXFKQjJkVW1mT3FMdHpLcDZRdHpPZXJHZQpSSmJQWFN1Rm0rRWxuMmhRVzE0MVUxbkJpWVpkenBseGtZRGgvb1BXMUhFaE1KZUkzUk5SNkdaQVhhbkNNM05jCmx5Q2puNkdEVHVVUnpXMFBBMVdPT055clltUVhLUkxpR2xSQzMwZTlVZkRFclBCelBvUkY5Umc4b3V1T2hpc2YKNUNjL1FEMUo5RjhDV1krZ3NLUk05dUJnY25FTS9FK0JoOUJoUkFGUitFU0diRm5ibmo0M3dPdk5uV2lpM3N6VgpiL0w1N2RzcW5hY1ZoY3RCb2tzQjhIdWkyZEdRTmlQaGRtNFEya3k2S0o4QVZjbmtWcWpGUGN0UHl3SURBUUFCCm80R0dNSUdETUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUIKQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCUmgyQXoyNFFMd2loMU5PczJyZU9ZYQpZSCtNVURBakJnTlZIUkVFSERBYWdoZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d0RRWUpLb1pJCmh2Y05BUUVMQlFBRGdnRUJBQmFlaDNSdG9XNW1Ta3VGTnk3Q0ZCNmpsVGhyVnd4NVY1MFdOTTZSdzltbFY0NUoKVzdIU0xMeUVaWG14UEF5WVgrRVExbUUwVEhqR0J5UnY3RGZDTzJjVERyaWtObkFub0xISUcvdnpUYmVkTmI2Swo2ZEhmY2VvOTIwNWh6MG1rNzRiNW1tM04rZGthbm85K25rU0h1Z3p0SThDeEQzOFpHRVRON3Zzc3V5TE1zZnFBCmtiVXJ1N2MzL0hLL2FCUS9XSkhSMm10WjJyMkwyYjVQVG0wRUNyWjFIaFhqejFlMWNTTkQ4WGRNYUxrd1RFVncKNVdZVTU3SHJkaHZrZXBIZVhJVHFHeWtvZjVQU2hzN2pORTgzWlBsRzZEYzFpc0ZDMTd0Ky9hbG9idTJuUmNKVApVOFYzSzZzVzdRRDN2Z3JvMkFhSHhxcjNRZWQ1dmtpNEN1Rk1BMzA9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBcHZLSFE2T0s1aXJrWEVpR29Yd3RTWWJKYlpBQ3UzUWNKKzI3VVo0MUJpeDY0djRvClN2Q1RlT2p1Q2VWT1hqTmQyOHl1cUpCMmRVbWZPcUx0ektwNlF0ek9lckdlUkpiUFhTdUZtK0VsbjJoUVcxNDEKVTFuQmlZWmR6cGx4a1lEaC9vUFcxSEVoTUplSTNSTlI2R1pBWGFuQ00zTmNseUNqbjZHRFR1VVJ6VzBQQTFXTwpPTnlyWW1RWEtSTGlHbFJDMzBlOVVmREVyUEJ6UG9SRjlSZzhvdXVPaGlzZjVDYy9RRDFKOUY4Q1dZK2dzS1JNCjl1QmdjbkVNL0UrQmg5QmhSQUZSK0VTR2JGbmJuajQzd092Tm5XaWkzc3pWYi9MNTdkc3FuYWNWaGN0Qm9rc0IKOEh1aTJkR1FOaVBoZG00UTJreTZLSjhBVmNua1ZxakZQY3RQeXdJREFRQUJBb0lCQUM1dVYyWmRicjBUQXM0VApzYlhwNW1LRHBUUGVrSlAzOS9pMjZwa0ppaSs4WVRVT2dNQk81b1VESzJqL0tHdVVsNjhRM3lhc2Z2V2gweklvCnJFQjJ6V2daSnlnQ2pFVUJPSXp1Rk12RXM0VUJLeEF1UkdCNUh4V1RsRFZvZ2FoNUV1R0pZMDlVWTJtelMzSkkKOUVmUllHZHNWa0dlL1FwZkhvTEFGZGYwWjU0ZEdzZmsrK2xlY1ArTC9LRkMreFBUaW82elJhZ1RyZnp2NWZqYwptY2s2KzB1VmV3VFlUY2Qrd3duM0xYa20wQjFuSkRxNGQ5dDlsQjM2cGY0UFJpR0FXS3EzQ09ScmJKMVcwUms2CmN0MzJueWZ3Rlp3cWk3R3pJVUlieDZDNWFpck1YcnpIY291ZXplczY3bjVHa2ZMbWhWaEJXSWJoTFNjVExLaDcKV2VJaXY1a0NnWUVBelpQMm90dFhiRmgxMEYrd3puZmwyR25KL2YzNTkxYWVJbHE4VUt4dzNxN0JrZ0RNZUtTVApkbEVtNGF4YU9vUG5PcDJWNUlpTENCUjJia3ZJajdHSHZJSEY0NlgxNEJ0Yk1RK3E4bGM0U1l4MnZjUjVnNlNrCkIzYmlreGNDSzVQNTlmTVpKTUJzeERHQ0NmWUtkUVRWUmtYYUJWbHhDWTNSblo1NHBxRUZBZmNDZ1lFQXorVDgKMi9lSXVXbjFFbVViU040OW5pZlMvd0RwSXFOeDNNOTJ2WU5aL0RTN2cyUTRBYWpTMnB0RGFtejBDUHlkaE5sawpML0V6RVExa09iSURIVjJ2aytkYmg0M2VOOXJpTFRmRTFiK2k1aHR1NXhSbGNJeXJjdUF1cnVzQ2hxU01SVC9tCkdhYWl6SmhRdkhZb2N0NnFHd0ZZRkhCdmUrSU1Cd1FJQjUwZDY4MENnWUIvUWYzbUdIT0l2VVhKQk1OVlBFRksKODBtMzhoVmZ0LzNSOUdzb1lXYkpZbEt2UjlGTFNVMkRhMzd2S2hyOHFCUm1ZNUNiVks4RUJHNi9uaWY4VTRCYgovOVY1TTQzOStkRThrSjlZdndjMytEeTFBai9hYnZ1ZkowZmdsOWlmRTA0am95WElhMW1wSmFDQy9BekRIWWZNCnBZYnQwczAzaGRQaGgyeldjVXpCUndLQmdRQ1VZMFBBMWd3M0c5UWJUeU9NZldUSjBHOGdLTXcvTng1OGwzQ1AKa0lQWUt1TjB3MEhlblZ2elFVTjdZVTFHWk5raUMvRWc3eTZlQzByd2k0a0JtdTlKeUtkaU4vYlhNMXFoSDk5VgpHalh4dkw4S0hWclNYUFc3Unh6TEtWOWlMMjBYdUtaS3hOQUs3T1VqdjhyYlF1ZHo0eCsxWnhPTC95cktqeXdVCkV5ZGFPUUtCZ1FDblRmN1BYc0JmQk5uZG9EcXc2WGJISjZWQTlWSWRFc1g3dHp3dENQRHcrSm52WlFReEFoR1YKVmswM1hxZE1lV3Ntbno2aVJXbjFrUDN6a1o0Ymo2M29vb003RjBsWDhRMWlNWDI2QklUUWZTdUJoMThHSkRqSApvekYzY0lRTlM1QTV3am1yQjJiU2JyYlFNRkc1UnIvb2pReUUrZ3FDNktSazN2VlFnWWpxOGc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/cilium-envoy/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-envoy-config
  namespace: kube-system
data:
  # Keep the key name as bootstrap-config.json to avoid breaking changes
  bootstrap-config.json: |
    {"admin":{"address":{"pipe":{"path":"/var/run/cilium/envoy/sockets/admin.sock"}}},"applicationLogConfig":{"logFormat":{"textFormat":"[%Y-%m-%d %T.%e][%t][%l][%n] [%g:%#] %v"}},"bootstrapExtensions":[{"name":"envoy.bootstrap.internal_listener","typedConfig":{"@type":"type.googleapis.com/envoy.extensions.bootstrap.internal_listener.v3.InternalListener"}}],"dynamicResources":{"cdsConfig":{"apiConfigSource":{"apiType":"GRPC","grpcServices":[{"envoyGrpc":{"clusterName":"xds-grpc-cilium"}}],"setNodeOnFirstMessageOnly":true,"transportApiVersion":"V3"},"initialFetchTimeout":"30s","resourceApiVersion":"V3"},"ldsConfig":{"apiConfigSource":{"apiType":"GRPC","grpcServices":[{"envoyGrpc":{"clusterName":"xds-grpc-cilium"}}],"setNodeOnFirstMessageOnly":true,"transportApiVersion":"V3"},"initialFetchTimeout":"30s","resourceApiVersion":"V3"}},"node":{"cluster":"ingress-cluster","id":"host~127.0.0.1~no-id~localdomain"},"overloadManager":{"resourceMonitors":[{"name":"envoy.resource_monitors.global_downstream_max_connections","typedConfig":{"@type":"type.googleapis.com/envoy.extensions.resource_monitors.downstream_connections.v3.DownstreamConnectionsConfig","max_active_downstream_connections":"50000"}}]},"staticResources":{"clusters":[{"circuitBreakers":{"thresholds":[{"maxRetries":128}]},"cleanupInterval":"2.500s","connectTimeout":"2s","lbPolicy":"CLUSTER_PROVIDED","name":"ingress-cluster","type":"ORIGINAL_DST","typedExtensionProtocolOptions":{"envoy.extensions.upstreams.http.v3.HttpProtocolOptions":{"@type":"type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions","commonHttpProtocolOptions":{"idleTimeout":"60s","maxConnectionDuration":"0s","maxRequestsPerConnection":0},"useDownstreamProtocolConfig":{}}}},{"circuitBreakers":{"thresholds":[{"maxRetries":128}]},"cleanupInterval":"2.500s","connectTimeout":"2s","lbPolicy":"CLUSTER_PROVIDED","name":"egress-cluster-tls","transportSocket":{"name":"cilium.tls_wrapper","typedConfig":{"@type":"type.googleapis.com/cilium.UpstreamTlsWrapperContext"}},"type":"ORIGINAL_DST","typedExtensionProtocolOptions":{"envoy.extensions.upstreams.http.v3.HttpProtocolOptions":{"@type":"type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions","commonHttpProtocolOptions":{"idleTimeout":"60s","maxConnectionDuration":"0s","maxRequestsPerConnection":0},"upstreamHttpProtocolOptions":{},"useDownstreamProtocolConfig":{}}}},{"circuitBreakers":{"thresholds":[{"maxRetries":128}]},"cleanupInterval":"2.500s","connectTimeout":"2s","lbPolicy":"CLUSTER_PROVIDED","name":"egress-cluster","type":"ORIGINAL_DST","typedExtensionProtocolOptions":{"envoy.extensions.upstreams.http.v3.HttpProtocolOptions":{"@type":"type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions","commonHttpProtocolOptions":{"idleTimeout":"60s","maxConnectionDuration":"0s","maxRequestsPerConnection":0},"useDownstreamProtocolConfig":{}}}},{"circuitBreakers":{"thresholds":[{"maxRetries":128}]},"cleanupInterval":"2.500s","connectTimeout":"2s","lbPolicy":"CLUSTER_PROVIDED","name":"ingress-cluster-tls","transportSocket":{"name":"cilium.tls_wrapper","typedConfig":{"@type":"type.googleapis.com/cilium.UpstreamTlsWrapperContext"}},"type":"ORIGINAL_DST","typedExtensionProtocolOptions":{"envoy.extensions.upstreams.http.v3.HttpProtocolOptions":{"@type":"type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions","commonHttpProtocolOptions":{"idleTimeout":"60s","maxConnectionDuration":"0s","maxRequestsPerConnection":0},"upstreamHttpProtocolOptions":{},"useDownstreamProtocolConfig":{}}}},{"connectTimeout":"2s","loadAssignment":{"clusterName":"xds-grpc-cilium","endpoints":[{"lbEndpoints":[{"endpoint":{"address":{"pipe":{"path":"/var/run/cilium/envoy/sockets/xds.sock"}}}}]}]},"name":"xds-grpc-cilium","type":"STATIC","typedExtensionProtocolOptions":{"envoy.extensions.upstreams.http.v3.HttpProtocolOptions":{"@type":"type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions","explicitHttpConfig":{"http2ProtocolOptions":{}}}}},{"connectTimeout":"2s","loadAssignment":{"clusterName":"/envoy-admin","endpoints":[{"lbEndpoints":[{"endpoint":{"address":{"pipe":{"path":"/var/run/cilium/envoy/sockets/admin.sock"}}}}]}]},"name":"/envoy-admin","type":"STATIC"}],"listeners":[{"address":{"socketAddress":{"address":"0.0.0.0","portValue":9964}},"filterChains":[{"filters":[{"name":"envoy.filters.network.http_connection_manager","typedConfig":{"@type":"type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager","httpFilters":[{"name":"envoy.filters.http.router","typedConfig":{"@type":"type.googleapis.com/envoy.extensions.filters.http.router.v3.Router"}}],"internalAddressConfig":{"cidrRanges":[{"addressPrefix":"10.0.0.0","prefixLen":8},{"addressPrefix":"172.16.0.0","prefixLen":12},{"addressPrefix":"192.168.0.0","prefixLen":16},{"addressPrefix":"127.0.0.1","prefixLen":32}]},"routeConfig":{"virtualHosts":[{"domains":["*"],"name":"prometheus_metrics_route","routes":[{"match":{"prefix":"/metrics"},"name":"prometheus_metrics_route","route":{"cluster":"/envoy-admin","prefixRewrite":"/stats/prometheus"}}]}]},"statPrefix":"envoy-prometheus-metrics-listener","streamIdleTimeout":"300s"}}]}],"name":"envoy-prometheus-metrics-listener"},{"address":{"socketAddress":{"address":"127.0.0.1","portValue":9878}},"filterChains":[{"filters":[{"name":"envoy.filters.network.http_connection_manager","typedConfig":{"@type":"type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager","httpFilters":[{"name":"envoy.filters.http.router","typedConfig":{"@type":"type.googleapis.com/envoy.extensions.filters.http.router.v3.Router"}}],"internalAddressConfig":{"cidrRanges":[{"addressPrefix":"10.0.0.0","prefixLen":8},{"addressPrefix":"172.16.0.0","prefixLen":12},{"addressPrefix":"192.168.0.0","prefixLen":16},{"addressPrefix":"127.0.0.1","prefixLen":32}]},"routeConfig":{"virtual_hosts":[{"domains":["*"],"name":"health","routes":[{"match":{"prefix":"/healthz"},"name":"health","route":{"cluster":"/envoy-admin","prefixRewrite":"/ready"}}]}]},"statPrefix":"envoy-health-listener","streamIdleTimeout":"300s"}}]}],"name":"envoy-health-listener"}]}}
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: default
    peer-service: "hubble-peer.kube-system.svc.cluster.local.:443"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-hubble-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-hubble-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            if ($http_user_agent ~* \"kube-probe\") { access_log off; }\n            # double `/index.html` is required here\n            try_files $uri $uri/ /index.html /index.html;\n        }\n\n        # Liveness probe\n        location /healthz {\n            access_log off;\n            add_header Content-Type text/plain;\n            return 200 'ok';\n        }\n    }\n}"
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium

rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium

roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-tlsinterception-secrets
  namespace: "cilium-secrets"
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-tlsinterception-secrets
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-envoy/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: cilium-envoy
  namespace: kube-system
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9964"
  labels:
    k8s-app: cilium-envoy
    app.kubernetes.io/name: cilium-envoy
    app.kubernetes.io/part-of: cilium
    io.cilium/app: proxy
spec:
  clusterIP: None
  type: ClusterIP
  selector:
    k8s-app: cilium-envoy
  ports:
  - name: envoy-metrics
    port: 9964
    protocol: TCP
    targetPort: envoy-metrics
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  annotations:
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium

spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: grpc
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium

spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/cilium-envoy/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium-envoy
  namespace: kube-system
  labels:
    k8s-app: cilium-envoy
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-envoy
    name: cilium-envoy
spec:
  selector:
    matchLabels:
      k8s-app: cilium-envoy
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: cilium-envoy
        name: cilium-envoy
        app.kubernetes.io/name: cilium-envoy
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        appArmorProfile:
          type: Unconfined
      containers:
      - name: cilium-envoy
        image: "quay.io/cilium/cilium-envoy:v1.34.10-1761014632-c360e8557eb41011dfb5210f8fb53fed6c0b3222@sha256:ca76eb4e9812d114c7f43215a742c00b8bf41200992af0d21b5561d46156fd15"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/cilium-envoy-starter
        args:
        - '--'
        - '-c /var/run/cilium/envoy/bootstrap-config.json'
        - '--base-id 0'
        - '--log-level info'
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9878
            scheme: HTTP
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
          initialDelaySeconds: 5
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9878
            scheme: HTTP
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9878
            scheme: HTTP
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        ports:
        - name: envoy-metrics
          containerPort: 9964
          hostPort: 9964
          protocol: TCP
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - NET_ADMIN
              - SYS_ADMIN
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - name: envoy-sockets
          mountPath: /var/run/cilium/envoy/sockets
          readOnly: false
        - name: envoy-artifacts
          mountPath: /var/run/cilium/envoy/artifacts
          readOnly: true
        - name: envoy-config
          mountPath: /var/run/cilium/envoy/
          readOnly: true
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: HostToContainer
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccountName: "cilium-envoy"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: cilium.io/no-schedule
                operator: NotIn
                values:
                - "true"
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: retina
            topologyKey: kubernetes.io/hostname
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium-envoy
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
      - name: envoy-sockets
        hostPath:
          path: "/var/run/cilium/envoy/sockets"
          type: DirectoryOrCreate
      - name: envoy-artifacts
        hostPath:
          path: "/var/run/cilium/envoy/artifacts"
          type: DirectoryOrCreate
      - name: envoy-config
        configMap:
          name: "cilium-envoy-config"
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          items:
            - key: bootstrap-config.json
              path: bootstrap-config.json
        # To keep state between restarts / upgrades
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium

spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: hubble-relay
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
            seccompProfile:
              type: RuntimeDefault
          image: "quay.io/cilium/hubble-relay:v1.18.3@sha256:e53e00c47fe4ffb9c086bad0c1c77f23cb968be4385881160683d9e15aa34dc3"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 3
          # livenessProbe will kill the pod, we should be very conservative
          # here on failures since killing the pod should be a last resort, and
          # we should provide enough time for relay to retry before killing it.
          livenessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 10
            # Give relay time to establish connections and make a few retries
            # before starting livenessProbes.
            initialDelaySeconds: 10
            # 10 second * 12 failures = 2 minutes of failure.
            # If relay cannot become healthy after 2 minutes, then killing it
            # might resolve whatever issue is occurring.
            #
            # 10 seconds is a reasonable retry period so we can see if it's
            # failing regularly or only sporadically.
            periodSeconds: 10
            failureThreshold: 12
          startupProbe:
            grpc:
              port: 4222
            # Give relay time to get it's certs and establish connections and
            # make a few retries before starting startupProbes.
            initialDelaySeconds: 10
            # 20 * 3 seconds = 1 minute of failure before we consider startup as failed.
            failureThreshold: 20
            # Retry more frequently at startup so that it can be considered started more quickly.
            periodSeconds: 3
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          - name: tls
            mountPath: /var/lib/hubble-relay/tls
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
        
      restartPolicy: Always
      priorityClassName: 
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: retina
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 1001
        runAsGroup: 1001
        runAsUser: 1001
      priorityClassName: 
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.13.3@sha256:661d5de7050182d495c6497ff0b007a7a1e379648e60830dd68c4d78ae21761d"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
        readinessProbe:
          httpGet:
            path: /
            port: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          allowPrivilegeEscalation: false
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.13.3@sha256:db1454e45dc39ca41fbf7cad31eec95d99e5b9949c39daaad0fa81ef29d56953"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          allowPrivilegeEscalation: false
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
